#!/usr/bin/env bash
set -euo pipefail

# Start bot
# Must be executed as root
if [[ $UID != 0 ]]; then
    echo "pocketsmith-tg-bot must be started as root"
    echo "Please re-run this script as"
    echo "  sudo ./start"
    exit 1
fi

check_dependencies () {
  for cmd in "$@"; do
    if ! command -v $cmd > /dev/null 2>&1; then
      echo "This script requires \"${cmd}\" to be installed"
      exit 1
    fi
  done
}

check_python_modules () {
  for cmd in "$@"; do
    if ! python3.11 -c "import ${cmd}" > /dev/null 2>&1; then
      echo "This script requires \"${cmd}\" to be installed"
      exit 1
    fi
  done
}

check_env_variables () {
  for cmd in "$@"; do
    if [ ${cmd} == "" ]; then
      echo "No ${cmd} variable provided. Add it to your environment with the following command:"
      echo "Export ${cmd}=YOURDATA"
    fi
  done
}

# Check system's dependencies
check_dependencies python3.11 pip3.11 certbot

# Check python's modules
check_python_modules requests json toml time telebot base64 datetime telegram_bot_calendar re flask gevent.pywsgi

# Execute configure script
export PRIVIP=`hostname -I | awk '{print $1}'`
export PS_USER=`curl -s --request GET \
     --url https://api.pocketsmith.com/v2/me \
     --header "X-Developer-Key: ${POCKETSMITH_TOKEN}" \
     --header "accept: application/json" | \
     jq -r ".id"`
mv ../config-sample.toml ../config.toml
python3.11 ../py/init.py

# Check for env variables
echo "Checking environment variables existence"
check_env_variables $DOMAIN $EMAIL $POCKETSMITH_TOKEN $TG_USER

# Create env variables
cd ..
export BOT_PATH=$PWD
cd ./bash

# Check SSL certificate existence
if ! [ -f /etc/letsencrypt/live/$DOMAIN/fullchain.pem -a -f /etc/letsencrypt/live/$DOMAIN/privkey.pem ]; then
  echo "SSL certificate not installed"
  echo "Creating certificate"
  certbot certonly -d $DOMAIN -n --standalone --preferred-challenges http --agree-tos -m $EMAIL --key-path /etc/letsencrypt/live/$DOMAIN/ --fullchain-path /etc/letsencrypt/live/$DOMAIN/ || {
    echo "SSL certificate installation failed."
    exit 1
  }    
  echo "SSL certificate succesfully installed"
fi

# Pull data from Pocketsmith
echo "Getting data from Pocketsmith"
python3.11 ../py/createLists.py && echo "Pocketsmith database succesfully retrieved"

# Creating systemd service for bot
echo "Creating systemd service"
cp $BOT_PATH/bash/ps_tg_bot.service /etc/systemd/system/
cd /etc/systemd/system/
echo "WorkingDirectory=${BOT_PATH}" >> ./ps_tg_bot.service
echo "ExecStart=/usr/bin/python3.11 ${BOT_PATH}/py/app.py" >> ./ps_tg_bot.service
systemctl daemon-reload
systemctl enable ps_tg_bot.service

# Starting Telegram bot
systemctl start ps_tg_bot.service && echo "Bot succesfully started. Now you can chat with him." || {
  echo "There was an error when trying to start the bot"
  exit 1
}